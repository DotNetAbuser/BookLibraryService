// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240612172824_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4780),
                            FirstName = "Александр",
                            LastName = "Шпак",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4789),
                            FirstName = "Оксана",
                            LastName = "Сижулина",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4791),
                            FirstName = "Петр",
                            LastName = "Кировский",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4793),
                            FirstName = "Адель",
                            LastName = "Каитская",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4795),
                            FirstName = "Михаил",
                            LastName = "Кармов",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//5.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4797),
                            FirstName = "Виолета",
                            LastName = "Сергеева",
                            MiddleName = "",
                            PicturePath = "Files//Images//AuthorPictures//6.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(4799),
                            FirstName = "Азиз",
                            LastName = "Тураев",
                            MiddleName = "Автор",
                            PicturePath = "Files//Images//AuthorPictures//7.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38672bb4-adb1-4481-a962-e8209a426da7"),
                            AuthorId = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9209),
                            Description = "Баш и Люси описание",
                            GenreId = 1,
                            PicturePath = "Files//Images//BookPictures//1.jpg",
                            Quantity = 3,
                            Title = "Баш и Люси",
                            Year = 1990
                        },
                        new
                        {
                            Id = new Guid("1d84ae73-0b64-4854-b463-a75d9b86bb6c"),
                            AuthorId = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9235),
                            Description = "Будь здорова пчелка описание",
                            GenreId = 1,
                            PicturePath = "Files//Images//BookPictures//2.jpg",
                            Quantity = 2,
                            Title = "Будь здорова пчелка",
                            Year = 1995
                        },
                        new
                        {
                            Id = new Guid("53346b3f-1c7b-4a3a-a404-119ec7c25f5b"),
                            AuthorId = 4,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9239),
                            Description = "Скучные девчонки описание",
                            GenreId = 6,
                            PicturePath = "Files//Images//BookPictures//3.jpg",
                            Quantity = 10,
                            Title = "Скучные девчонки",
                            Year = 2001
                        },
                        new
                        {
                            Id = new Guid("11b4a44c-ad4d-43ef-839d-01d4e13417e3"),
                            AuthorId = 5,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9242),
                            Description = "умные земли описание",
                            GenreId = 7,
                            PicturePath = "Files//Images//BookPictures//4.jpg",
                            Quantity = 12,
                            Title = "Умные земли",
                            Year = 2005
                        },
                        new
                        {
                            Id = new Guid("ae10a5a4-555b-45b3-a44e-6455dba458dd"),
                            AuthorId = 6,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9244),
                            Description = "Темная сторона интернета описание",
                            GenreId = 8,
                            PicturePath = "Files//Images//BookPictures//5.jpg",
                            Quantity = 10,
                            Title = "Темная сторона интернета",
                            Year = 2012
                        },
                        new
                        {
                            Id = new Guid("7136ba70-11b4-4451-8eee-1ed86787f78c"),
                            AuthorId = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9248),
                            Description = "Экономика агропромышленности описание",
                            GenreId = 8,
                            PicturePath = "Files//Images//BookPictures//6.jpg",
                            Quantity = 1,
                            Title = "Экономика агропромышленности",
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("9243a8d3-43f6-4032-94ea-558636d85674"),
                            AuthorId = 6,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9250),
                            Description = "Свободное падение описание",
                            GenreId = 6,
                            PicturePath = "Files//Images//BookPictures//7.jpg",
                            Quantity = 6,
                            Title = "Свободное падение",
                            Year = 2009
                        },
                        new
                        {
                            Id = new Guid("da3ba47e-d6ae-4228-bc1e-5d4c33227806"),
                            AuthorId = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9253),
                            Description = "Современная архитектура зданий описание",
                            GenreId = 8,
                            PicturePath = "Files//Images//BookPictures//8.jpg",
                            Quantity = 4,
                            Title = "Современная архитектура зданий",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("b7ae481a-c9eb-4978-9a54-a8bd39bf7a01"),
                            AuthorId = 7,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9262),
                            Description = "Святой дух описание",
                            GenreId = 9,
                            PicturePath = "Files//Images//BookPictures//9.jpg",
                            Quantity = 0,
                            Title = "Святой дух",
                            Year = 2001
                        },
                        new
                        {
                            Id = new Guid("7d48e1b8-de63-49c8-8362-1cad86600207"),
                            AuthorId = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9265),
                            Description = "Апокалипсис Ллойда описание",
                            GenreId = 10,
                            PicturePath = "Files//Images//BookPictures//10.jpg",
                            Quantity = 1,
                            Title = "Апокалипсис Ллойда",
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("2327a73b-09f3-431f-bb65-3788c41fe147"),
                            AuthorId = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9268),
                            Description = "Ночная тень описание",
                            GenreId = 6,
                            PicturePath = "Files//Images//BookPictures//11.jpg",
                            Quantity = 9,
                            Title = "Ночная тень",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("52f83ea8-0e9e-4f94-b747-780d92794f2a"),
                            AuthorId = 6,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9271),
                            Description = "Радикальное садоводство описание",
                            GenreId = 8,
                            PicturePath = "Files//Images//BookPictures//12.jpg",
                            Quantity = 1,
                            Title = "Радикальное садоводство",
                            Year = 2010
                        },
                        new
                        {
                            Id = new Guid("9d3e2086-76ed-4794-bd92-9c834ef582f3"),
                            AuthorId = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9273),
                            Description = "Красная королева описание",
                            GenreId = 9,
                            PicturePath = "Files//Images//BookPictures//13.jpg",
                            Quantity = 10,
                            Title = "Красная королева",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("7c6fa4fb-1772-4257-9aa7-6092dbbb3982"),
                            AuthorId = 7,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9316),
                            Description = "Разбитый описание",
                            GenreId = 2,
                            PicturePath = "Files//Images//BookPictures//14.jpg",
                            Quantity = 3,
                            Title = "Разбитый",
                            Year = 2011
                        },
                        new
                        {
                            Id = new Guid("e6ab377b-fb64-4335-95d5-295ffe3647ee"),
                            AuthorId = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9319),
                            Description = "",
                            GenreId = 3,
                            PicturePath = "Files//Images//BookPictures//15.jpg",
                            Quantity = 8,
                            Title = "Девушки чернил и звёзд",
                            Year = 2013
                        },
                        new
                        {
                            Id = new Guid("7938c6cb-0f9b-47b9-a40a-95d45e916fdb"),
                            AuthorId = 7,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9321),
                            Description = "Счастливый лимон описание",
                            GenreId = 1,
                            PicturePath = "Files//Images//BookPictures//16.jpg",
                            Quantity = 12,
                            Title = "Счастливый лимон",
                            Year = 2000
                        },
                        new
                        {
                            Id = new Guid("2838be61-ff5c-4321-97b4-304535e3e867"),
                            AuthorId = 4,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(9327),
                            Description = "Мир абстрактных цветов!",
                            GenreId = 8,
                            PicturePath = "Files//Images//BookPictures//17.jpg",
                            Quantity = 0,
                            Title = "Мир абстрактных цветов",
                            Year = 2020
                        });
                });

            modelBuilder.Entity("Domain.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2589),
                            Name = "Сказки"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2647),
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2649),
                            Name = "Роман"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2650),
                            Name = "Комедия"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2651),
                            Name = "Драма"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2654),
                            Name = "Новелла"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2655),
                            Name = "Бизнес"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2656),
                            Name = "Образование"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2657),
                            Name = "Мистика"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 110, DateTimeKind.Utc).AddTicks(2659),
                            Name = "Черный юмор"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TakenFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TakenTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 111, DateTimeKind.Utc).AddTicks(1802),
                            Name = "Ожидает получения"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 111, DateTimeKind.Utc).AddTicks(1811),
                            Name = "Взята в пользование"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 111, DateTimeKind.Utc).AddTicks(1813),
                            Name = "Ожидается подтверждения продления"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 111, DateTimeKind.Utc).AddTicks(1814),
                            Name = "Ожидает возврата"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 111, DateTimeKind.Utc).AddTicks(1815),
                            Name = "Закрыта"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48ac3109-f971-4aca-ac47-3ee4699ae989"),
                            Content = "Брал книгу в аренду на 1 месяц, после чего продлил еще на один, остался очень доволен!",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5156),
                            Grade = 5,
                            UserId = new Guid("cdc4a3b4-125f-47f6-8a26-99d057c47d5b")
                        },
                        new
                        {
                            Id = new Guid("00cc963c-f0a0-4d67-be95-706eb0230ab1"),
                            Content = "Взяла на 2 недели сказку, Репка мне очень понравилась.",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5229),
                            Grade = 5,
                            UserId = new Guid("7e47a9d9-c095-4cfc-bd5d-4d5428b760e5")
                        },
                        new
                        {
                            Id = new Guid("0ec37910-7e96-443e-8dc1-f2db08e18974"),
                            Content = "Брал повесть о похождениях Петра Великого очень понравился рекомендую!",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5234),
                            Grade = 4,
                            UserId = new Guid("08278464-1115-440e-b6ab-5f70d77db79d")
                        },
                        new
                        {
                            Id = new Guid("2b986e1c-1430-4050-8ed7-838291dc4117"),
                            Content = "Пользуюсь услугами этой организации уже 2 года очень довольна, всегда есть что взять почитать!",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5257),
                            Grade = 5,
                            UserId = new Guid("2f25fde8-c877-407c-adc9-cad036363c53")
                        },
                        new
                        {
                            Id = new Guid("746edb72-1eb7-450a-9e60-6ceb2d2f7247"),
                            Content = "Брал для учебы учебник по математике 11 класс, смогу подготовиться к ЕГЭ и сдал его на 82 балла, очень благодарен",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5259),
                            Grade = 4,
                            UserId = new Guid("da9b2344-4237-4868-ad78-5e1e35a467fe")
                        },
                        new
                        {
                            Id = new Guid("96dfd1c6-2689-477a-8519-db9427a8f6a3"),
                            Content = "Читаю каждый день, по 5 часов в день, очень благодарна данному проекта моего знакомого-друга Азиза!",
                            Created = new DateTime(2024, 6, 12, 17, 28, 24, 109, DateTimeKind.Utc).AddTicks(5263),
                            Grade = 5,
                            UserId = new Guid("85e3c09a-fa0c-4499-97c8-64644e588023")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 6, 12, 17, 28, 22, 903, DateTimeKind.Utc).AddTicks(5284),
                            Name = "Гость"
                        },
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 6, 12, 17, 28, 22, 903, DateTimeKind.Utc).AddTicks(5289),
                            Name = "Библиотекарь"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e18278e-e363-4e85-8ac7-74915712b816"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 22, 904, DateTimeKind.Utc).AddTicks(1778),
                            Email = "aziz_guest@gmail.com",
                            PasswordHash = "$2a$11$DaIMIM6H81Uqrbox5.zYoOM4W28KPPphGhQkOJ28XAxYleVcryLqa",
                            PicturePath = "Files//Images//ProfilePictures//7.jpg",
                            RoleId = 2,
                            Username = "aziz_guest"
                        },
                        new
                        {
                            Id = new Guid("1da5fcbf-5d3b-4caa-ae9a-3669c2a9ab28"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 53, DateTimeKind.Utc).AddTicks(4499),
                            Email = "aziz_librarian@gmail.com",
                            PasswordHash = "$2a$11$4GUuWIe7NA8vvd3nbjkTaeKVGfQtyq1liDjJftAsbxkf3.jToVrQK",
                            PicturePath = "Files//Images//ProfilePictures//7.jpg",
                            RoleId = 1,
                            Username = "aziz_librarian"
                        },
                        new
                        {
                            Id = new Guid("cdc4a3b4-125f-47f6-8a26-99d057c47d5b"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 207, DateTimeKind.Utc).AddTicks(2138),
                            Email = "amir_guest@gmail.com",
                            PasswordHash = "$2a$11$fnHFZv9fHtPd8BB00xp34.cDopJhuusnZocKqS3HixH/yAToJTZiC",
                            PicturePath = "Files//Images//ProfilePictures//1.png",
                            RoleId = 2,
                            Username = "amir_hairulin"
                        },
                        new
                        {
                            Id = new Guid("7e47a9d9-c095-4cfc-bd5d-4d5428b760e5"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 357, DateTimeKind.Utc).AddTicks(1284),
                            Email = "adel_guest@gmail.com",
                            PasswordHash = "$2a$11$yPTPYMjs8bakpGPVXqnvZeP.8H2cpcB4..mOhEg.HspIRfLB/sK5m",
                            PicturePath = "Files//Images//ProfilePictures//2.png",
                            RoleId = 2,
                            Username = "adel_shpahina"
                        },
                        new
                        {
                            Id = new Guid("08278464-1115-440e-b6ab-5f70d77db79d"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 510, DateTimeKind.Utc).AddTicks(6206),
                            Email = "bulat_guest@gmail.com",
                            PasswordHash = "$2a$11$IzVK9IMcq60p2qa9aEEWDuKxREQHY63T40hG8Mby46uXKdb71paPG",
                            PicturePath = "Files//Images//ProfilePictures//3.png",
                            RoleId = 2,
                            Username = "bulat_zakirov"
                        },
                        new
                        {
                            Id = new Guid("2f25fde8-c877-407c-adc9-cad036363c53"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 660, DateTimeKind.Utc).AddTicks(737),
                            Email = "ilsia_guest@gmail.com",
                            PasswordHash = "$2a$11$1vcoveHfu1GJgxrN8Rw8Lu7LBN/rPtbRzmsVHi66mRWWZXP0WNley",
                            PicturePath = "Files//Images//ProfilePictures//4.png",
                            RoleId = 2,
                            Username = "ilsia_iabarova"
                        },
                        new
                        {
                            Id = new Guid("da9b2344-4237-4868-ad78-5e1e35a467fe"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 809, DateTimeKind.Utc).AddTicks(5964),
                            Email = "serega_guest@gmail.com",
                            PasswordHash = "$2a$11$IAP7UNYI8jr5QicPuDPdCOWvepbLp5XbBJwUpKoPVuzhbT2WolpDO",
                            PicturePath = "Files//Images//ProfilePictures//5.png",
                            RoleId = 2,
                            Username = "serega_michurin"
                        },
                        new
                        {
                            Id = new Guid("85e3c09a-fa0c-4499-97c8-64644e588023"),
                            Created = new DateTime(2024, 6, 12, 17, 28, 23, 959, DateTimeKind.Utc).AddTicks(4251),
                            Email = "maria_guest@gmail.com",
                            PasswordHash = "$2a$11$Nu83V6EQoiUtGcpv155XqOCkOrqenYMcYBoCfvsmAI68TTzMt.NA.",
                            PicturePath = "Files//Images//ProfilePictures//6.png",
                            RoleId = 2,
                            Username = "maria_utiasova"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("Domain.Entities.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.GenreEntity", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.BookEntity", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrderStatusEntity", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Entities.BookEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.GenreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatusEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
