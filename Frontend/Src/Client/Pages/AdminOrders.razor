@page "/admin-orders"

@layout AdminLayout

@attribute [Authorize(Roles = "Библиотекарь")]

<section class="orders">

   <h1 class="title">Все заказы</h1>

   <div class="box-container">
      
      @foreach (var order in _ordersList)
      {

         <div class="box">
            @if (order.Status != "Ожидается подтверждения продления")
            {
               <p> Взята в пользование с : <span>@order.TakenFrom.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</span> </p>
               <p> Нужно будет вернуть до : <span>@order.TakenTo.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</span> </p>  
            }
            <p> Название книги : <span>@order.BookTitle</span> </p>
            <p> Имя пользователя на кого взята книга : <span>@order.Username</span> </p>
            <p> Статус : <span> @order.Status </span> </p>
            <p> Создано : <span> @order.Created.ToLocalTime().ToString("dd.MM.yyyy HH:mm") </span></p>
            <EditForm Model="order" OnValidSubmit="async () => await ChangeStatusAsync(order.Id, order.StatusId)">
               <InputSelect class="box" @bind-Value="order.StatusId">
                  @foreach (var status in _statusesList)
                  {
                     <option value="@status.Id">@status.Name</option>
                  }
               </InputSelect>
               <input type="submit" value="Обновить" name="update_order" class="option-btn">
               <a @onclick="() => DeleteOrderAsync(order.Id)" class="delete-btn">Удалить заказ</a>
            </EditForm>
         </div>
         
         
      }
      
        @if (!_isBusy && _ordersList.Count == 0)
        {
           <p class="empty">Здесь пока ничего нет!</p>
        }
      
   </div>
   
        @if (_totalCount > _ordersList.Count)
        {
           <div style="display: flex; justify-content: center;">
              <button @onclick="GetNextDataOrdersAsync" class="btn">Показать ещё</button>
           </div>
        }
     
     @if (_isBusy) 
     {
        <div style="display: flex; justify-content: center;">
           <div class="loader"></div>
        </div>
     }
   
</section>

@code{
   [Inject] IOrderManager OrderManager { get; set; } = default!;
   [Inject] IOrderStatusManager OrderStatusManager { get; set; } = default!;
   [Inject] IJSRuntime JsRuntime { get; set; } = default!;
   [Inject] NavigationManager NavigationManager { get; set; } = default!;
   
   private bool _isBusy;
   private List<OrderResponse> _ordersList = [];
   private int _totalCount;

   private List<OrderStatusResponse> _statusesList = [];

   private async Task DeleteOrderAsync(Guid id)
   {
      try
      {
         _isBusy = true;
         
         var result = await OrderManager.DeleteAsync(id);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var message in result.Messages)
            await JsRuntime.InvokeVoidAsync("alert", message);
         await LoadDataOrdersAsync();
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }
   
   private async Task ChangeStatusAsync(Guid id, int statusId)
   {
      try
      {
         _isBusy = true;

         var request = new ChangeOrderStatusRequest
         {
            StatusId = statusId
         };
         
         var result = await OrderManager.ChangeOrderStatusRequest(id, request);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var message in result.Messages)
            await JsRuntime.InvokeVoidAsync("alert", message);
         await LoadDataOrdersAsync();
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }
   
   private int pageNumber = 1;
   private int pageSize = 6;

   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();
      await LoadDataOrderStatusesAsync();
      await LoadDataOrdersAsync();
   }

   private async Task LoadDataOrderStatusesAsync()
   {
      try
      {
         _isBusy = true;

         var result = await OrderStatusManager.GetAllStatusesAsync();
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         _statusesList = [..result.Data];
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }
   
   private async Task LoadDataOrdersAsync()
   {
      try
      {
         _isBusy = true;

         _ordersList.Clear();
         pageNumber = 1;
         _totalCount = 0;
         
         var result = await OrderManager.GetPaginatedOrdersAsync(
            pageNumber, pageSize);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var order in result.Data.List)
            _ordersList.Add(order);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

   private async Task GetNextDataOrdersAsync()
   {
      try
      {
         _isBusy = true;

         pageNumber += 1;
         
         var result = await OrderManager.GetPaginatedOrdersAsync(
            pageNumber, pageSize);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var order in result.Data.List)
            _ordersList.Add(order);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }
   
}
