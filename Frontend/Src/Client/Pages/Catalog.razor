@page "/catalog"

<div class="heading">
   <h3>Наш каталог</h3>
   <p> <a href="home">Главная</a> / каталог </p>
</div>

<section class="products">

   <h1 class="title">Каталог книг</h1>

   <div class="box-container">
       
      @foreach (var book in _bookList)
      {
         <div class="box">
            <img src="@(ApplicationConstants.BackendAddress + book.PicturePath)" alt="" class="image">
            <div class="name" style="min-height: 75px">@book.Title</div>
            <div class="box"><h2>Жанр: @book.Genre</h2></div>
            <div class="box">
               <h2> Автор: @book.AuthorLastName @book.AuthorFirstName @book.AuthorMiddleName</h2> 
            </div>
            <div class="box"><h2>Год выпуска: @book.Year</h2></div>
            <div type="number"  class="qty" name="product_quantity">Кол-во свободных @book.Quantity</div>
            @if (book.Quantity != 0)
            {
               <a href="/create-order/@book.Id" class="btn">Взять в пользование</a>
            }
            else
            {
               <h2>В данный момент данная книга не доступна</h2>
            }
         </div>
      }

      @if (!_isBusy && _bookList.Count == 0)
      {
         <p class="empty">Здесь пока ничего нет!</p>
      }
   </div>
   @if (_isBusy) 
   { 
      <div style="display: flex; justify-content: center;">
         <div class="loader"></div>
      </div>
   }
   @if (_totalCount > _bookList.Count)
   { 
      <div style="display: flex; justify-content: center;">
         <button @onclick="GetNextDataBooksAsync" class="btn">Показать ещё</button>
      </div>
   }
</section>

@code{

   [Inject] IJSRuntime JsRuntime { get; set; } = default!;
   [Inject] IBookManager BookManager { get; set; } = default!;
   
   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();
      await LoadDataBookAsync();
   }

   private bool _isBusy;
   private List<BookResponse> _bookList = [];

   private int _pageNumber = 1;
   private int _pageSize = 12;
   private int _totalCount = 0;

   private async Task LoadDataBookAsync()
   {
      try
      {
         _isBusy = true;

         var result = await BookManager.GetPaginatedBooksAsync(
            _pageNumber, _pageSize, string.Empty);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _bookList.Add(author);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

   private async Task GetNextDataBooksAsync()
   {
      try
      {
         _isBusy = true;

         _pageNumber += 1;
         
         var result = await BookManager.GetPaginatedBooksAsync(
            _pageNumber, _pageSize, string.Empty);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _bookList.Add(author);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }
   

}