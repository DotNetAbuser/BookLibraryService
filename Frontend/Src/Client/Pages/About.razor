@page "/about"
@using Infrastructure.Constants

@attribute [StreamRendering(true)]

<div class="heading">
   <h3>О нас</h3>
   <p> <a href="home">Главная</a> / о нас </p>
</div>

<section class="about">

   <div class="flex">

      <div class="image">
         <img src="./assets/images/about-img.jpg" alt="">
      </div>

      <div class="content">
         <h3>Почему стоит выбрать именно нас?</h3>
         <p>Работаем уже 10 лет! Сотни довольных книголюбов! Мы выдаем книги нуждающися абсолютно бесплатно! 
            От вас ничего не нужно, необходимо только выбрать интересующую вас книгу и оформить ее в использование!</p>
      </div>

   </div>

</section>

<section class="reviews">

   <h1 class="title">Последние отзывы</h1>

   <div class="box-container">


      @foreach (var review in _reviewList) 
      { 
         <div class="box">
            <img src="@(ApplicationConstants.BackendAddress + review.UserPicturePath)" alt="">
            <p>@review.Content</p>
            <div class="stars">
               <i class="@(review.Grade < 1 ? "far fa-star" : "fas fa-star")"></i>
               <i class="@(review.Grade < 2 ? "far fa-star" : "fas fa-star")"></i>
               <i class="@(review.Grade < 3 ? "far fa-star" : "fas fa-star")"></i>
               <i class="@(review.Grade < 4 ? "far fa-star" : "fas fa-star")"></i>
               <i class="@(review.Grade < 5 ? "far fa-star" : "fas fa-star")"></i>
            </div>
            <h3>@review.Username</h3>
         </div>
      }
   </div>

   @if (_isBusyReviews)
   {
      <div  style="display: flex; justify-content: center;">
         <div class="loader"></div>
      </div>
   }
   
   @if (_totalCountReviews > _reviewList.Count)
   {
      <div style="display: flex; justify-content: center;">
         <button @onclick="GetNextDataReviewsAsync" class="btn">Показать ещё</button>
      </div>
   }
</section>

<section class="authors">

   <h1 class="title">Наши авторы</h1>

   <div class="box-container">
      @foreach (var author in _authorList)
      {
         <div class="box">
            <img src="@(ApplicationConstants.BackendAddress + author.PicturePath)" alt="">
            <div class="share">

            </div>
            <h3>@author.LastName @author.FirstName @author.MiddleName</h3>
         </div>
      }
   </div>
   @if (_isBusyAuthors)
   {
      <div  style="display: flex; justify-content: center;">
         <div class="loader"></div>
      </div>
   }
   
   @if (_totalCountAuthors > _authorList.Count)
   { 
      <div style="display: flex; justify-content: center;">
         <button @onclick="GetNextDataAuthorsAsync" class="btn">Показать ещё</button>
      </div>
   }
</section>

@code{

   [Inject] IReviewManager ReviewManager { get; set; } = default!;
   [Inject] IAuthorManager AuthorManager { get; set; } = default!;
   [Inject] IJSRuntime JsRuntime { get; set; } = default!;


   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();
      await LoadDataReviewsAsync();
      await LoadDataAuthorsAsync();
   }

   private bool _isBusyReviews;
   private bool _isBusyAuthors;
   private List<ReviewResponse> _reviewList = [];
   private List<AuthorResponse> _authorList = [];

   private int _pageNumberReviews = 1;
   private int _pageSizeReviews = 6;

   private int _totalCountReviews = 0;

   private int _pageNumberAuthors = 1;
   private int _pageSizeAuthors = 6;
   
   private int _totalCountAuthors = 0;

   private async Task LoadDataReviewsAsync()
   {
      try
      {
         _isBusyReviews = true;

         var result = await ReviewManager.GetPaginatedReviewsAsync(
            _pageNumberReviews, _pageSizeReviews);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var review in result.Data.List)
            _reviewList.Add(review);
         _totalCountReviews = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusyReviews = false;
      }
   }

   private async Task LoadDataAuthorsAsync()
   {
      try
      {
         _isBusyAuthors = true;
         
         var result = await AuthorManager.GetPaginatedAuthorsAsync(
            _pageNumberAuthors, _pageSizeAuthors);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _authorList.Add(author);
         _totalCountAuthors = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusyAuthors = false;
      }
   }

   private async Task GetNextDataReviewsAsync()
   {
      try
      {
         _isBusyReviews = true;

         _pageNumberReviews += 1;
         
         var result = await ReviewManager.GetPaginatedReviewsAsync(
            _pageNumberReviews, _pageSizeReviews);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var review in result.Data.List)
            _reviewList.Add(review);
         _totalCountReviews = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusyReviews = false;
      }
   }
   
   private async Task GetNextDataAuthorsAsync()
   {
      try
      {
         _isBusyAuthors = true;

         _pageNumberAuthors += 1;

         var result = await AuthorManager.GetPaginatedAuthorsAsync(
            _pageNumberAuthors, _pageSizeAuthors);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _authorList.Add(author);
         _totalCountAuthors = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusyAuthors= false;
      }
   }

}