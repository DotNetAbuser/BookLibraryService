@page "/sign-up"
@layout EmptyLayout

<div class="form-container">

   @if (!_isBusy)
   {
      <EditForm Model="_request" OnValidSubmit="SubmitFormAsync">
         <DataAnnotationsValidator/>
         <h3>Регистрация</h3>
         <InputText @bind-Value="_request.Email" type="text" name="email" placeholder="Введите электронную почту" class="box"/>
         <InputText @bind-Value="_request.Username" type="text" name="username" placeholder="Введите имя пользователя" class="box"/>
         <InputText @bind-Value="_request.Password" type="password" name="password" placeholder="Введите пароль" class="box"/>
         <InputText @bind-Value="_request.ConfirmPassword" type="password" name="confirm-password" placeholder="Повторите введённый пароль" class="box"/>
         <ValidationSummary/>
         <input type="submit" name="submit" value="Зарегистрироваться" class="btn">
         <p>Уже с нами? <a href="sign-in">Авторизироваться</a></p>
      </EditForm>
   }
   else
   {
      <div class="loader-container">
         <img src="./assets/images/loader-img.gif" alt="">
      </div>
   }
   

</div>

@code{
   [Inject] IJSRuntime JsRuntime { get; set; } = default!;
   [Inject] NavigationManager NavigationManager { get; set; } = default!;
   [Inject] IUserManager UserManager { get; set; } = default!;

   private bool _isBusy;
   private SignUpRequest _request = new();

   private async Task SubmitFormAsync()
   {
      try
      {
         _isBusy = true;

         var result = await UserManager.CreateAsync(_request);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var message in result.Messages)
            await JsRuntime.InvokeVoidAsync("alert", message);
         NavigationManager.NavigateTo(NavigationManager.BaseUri + "sign-in", true,true);
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

}