@page "/"
@page "/home"

<section class="home">

   <div class="content">
      <h3>Книги открывают новые двери.</h3>
   </div>

</section>

<section class="products">

   <h1 class="title">Последние поступления</h1>

   <div class="box-container">


    @foreach (var book in _bookList)
    {
       <div class="box">
          <img src="@(ApplicationConstants.BackendAddress + book.PicturePath)" alt="" class="image">
          <div class="name" style="min-height: 75px">@book.Title</div>
          <div class="box"><h2>Жанр: @book.Genre</h2></div>
          <div type="number"  class="qty" name="product_quantity">Кол-во свободных @book.Quantity</div>
          @if (book.Quantity != 0)
          {
             <button class="btn">Взять в пользование</button>
          }
          else
          {
             <h2>В данный момент данная книга не доступна</h2>
          }
       </div>
       
    }
     
    @if (_bookList.Count == 0 && _isBusy == false)
    {
       <p class="empty">Здесь пока ничего нет!</p>
    }

   </div>

   @if (_isBusy) 
   { 
      <div style="display: flex; justify-content: center;">
         <div class="loader"></div>
      </div>
   }
   
   @if (_totalCount > _bookList.Count)
   {
      <div style="display: flex; justify-content: center;">
         <button @onclick="GetNextDataBooksAsync" class="btn">Показать ещё</button>
      </div>
   }

</section>

<section class="about">

   <div class="flex">

      <div class="image">
         <img src="images/about-img.jpg" alt="">
      </div>

      <div class="content">
         <h3>О нас</h3>
         <p>Узнайте о отзывах о нас  и о наших авторах!</p>
         <a href="about" class="btn">Читать больше</a>
      </div>

   </div>

</section>

<section class="home-contact">

   <div class="content">
      <h3>Есть вопросы?</h3>
      <p>Свяжитесь с нами, мы работаем круглосуточно, ответим на любой ваш вопрос!</p>
      <a href="contact" class="white-btn">Связь с нами</a>
   </div>

</section>

@code{

   [Inject] IBookManager BookManager { get; set; } = default!;
   [Inject] IJSRuntime JsRuntime { get; set; } = default!;

   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();
      await LoadDataBookAsync();
   }

   private bool _isBusy;
   private List<BookResponse> _bookList = [];
   
   private int _pageNumber = 1;
   private int _pageSize = 6;
   private int _totalCount = 0;
   
   private async Task LoadDataBookAsync()
   {
      try
      {
         _isBusy = true;

         var result = await BookManager.GetPaginatedBooksAsync(
            _pageNumber, _pageSize, string.Empty);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _bookList.Add(author);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

   private async Task GetNextDataBooksAsync()
   {
      try
      {
         _isBusy = true;

         _pageNumber += 1;
         
         var result = await BookManager.GetPaginatedBooksAsync(
            _pageNumber, _pageSize, string.Empty);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }
         foreach (var author in result.Data.List)
            _bookList.Add(author);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

}