@page "/orders"

@attribute [Authorize]

<div class="heading">
   <h3>Ваши заказы</h3>
   <p> <a href="home">Главная</a> / заказы </p>
</div>

<section class="placed-orders">

   <h1 class="title">Взятые вами книги</h1>

   <div class="box-container">
      
      @foreach (var order in _ordersList)
      {
         <div class="box">
            <p> Взята в пользование с : <span>@order.TakenFrom.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</span> </p>
            <p> Нужно будет вернуть до : <span>@order.TakenTo.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</span> </p>
            <p> Имя пользователя на кого взята книга : <span>@order.Username</span> </p>
            <p> Статус :<span> @order.Status </span> </p>
            <p> Создано : <span> @order.Created.ToLocalTime().ToString("dd.MM.yyyy HH:mm") </span></p>
            @*<button class="btn delete-btn">Отменить</button>
            <button class="btn">Продлить</button>*@
         </div>
      }
      
      @if (!_isBusy && _ordersList.Count == 0)
      {
         <p class="empty">Вы ещё не брали ни одной книги!</p>
      }

   </div>
   
      @if (_totalCount > _ordersList.Count)
      {
         <div style="display: flex; justify-content: center;">
            <button @onclick="GetNextDataMyOrdersAsync" class="btn">Показать ещё</button>
         </div>
      }
   
   @if (_isBusy) 
   {
      <div style="display: flex; justify-content: center;">
         <div class="loader"></div>
      </div>
   }

</section>

@code{

   [Inject] IOrderManager OrderManager { get; set; } = default!;
   [Inject] IJSRuntime JsRuntime { get; set; } = default!;
   [Inject] NavigationManager NavigationManager { get; set; } = default!;

   private bool _isBusy;
   private List<OrderResponse> _ordersList = [];

   private int _pageNumber = 1;
   private int _pageSize = 6;

   private int _totalCount;
   
   
   protected override async Task OnInitializedAsync()
   {
      await base.OnInitializedAsync();
      await LoadDataMyOrdersAsync();
   }

   private async Task LoadDataMyOrdersAsync()
   {
      try
      {
         _isBusy = true;

         var result = await OrderManager.GetPaginatedMyOrdersAsync(_pageNumber, _pageSize);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var order in result.Data.List)
            _ordersList.Add(order);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

   private async Task GetNextDataMyOrdersAsync()
   {
      try
      {
         _isBusy = true;

         _pageNumber += 1;
         
         var result = await OrderManager.GetPaginatedMyOrdersAsync(_pageNumber, _pageSize);
         if (!result.Succeeded)
         {
            foreach (var message in result.Messages)
               await JsRuntime.InvokeVoidAsync("alert", message);
            return;
         }

         foreach (var order in result.Data.List)
            _ordersList.Add(order);
         _totalCount = result.Data.TotalCount;
      }
      catch (Exception ex)
      {
         await JsRuntime.InvokeVoidAsync("alert", ex.Message);
      }
      finally
      {
         _isBusy = false;
      }
   }

}